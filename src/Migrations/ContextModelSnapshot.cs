// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrintLayer.Data;

namespace PrintLayer.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PrintLayer.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("PrintLayer.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4486341b-de86-487e-8f33-7ed134d63205"),
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 692, DateTimeKind.Utc).AddTicks(9186),
                            Description = "This is a test news description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 1"
                        },
                        new
                        {
                            Id = new Guid("e252f6dc-418d-46ef-a7bb-53d8e0129d71"),
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 693, DateTimeKind.Utc).AddTicks(564),
                            Description = "This is a test news description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 2"
                        },
                        new
                        {
                            Id = new Guid("f4034489-3f25-411f-a16c-c08162c9ba59"),
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 693, DateTimeKind.Utc).AddTicks(648),
                            Description = "This is a test news description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 3"
                        },
                        new
                        {
                            Id = new Guid("e3b3892f-64fd-490f-be31-d1f15faf20e7"),
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 693, DateTimeKind.Utc).AddTicks(683),
                            Description = "This is a test news description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 4"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4245a898-4606-4b16-9bdc-4095dd269286"),
                            Address = "Moscow Kremlin st 0",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(2760),
                            Description = "Sample Description 0",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("168615cf-78ed-4659-bdee-377ac58b444d"),
                            Address = "Moscow Kremlin st 1",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(5572),
                            Description = "Sample Description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("15d547ac-0386-4da3-98ff-d2e8528bee4e"),
                            Address = "Moscow Kremlin st 2",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(5722),
                            Description = "Sample Description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("38b4404c-3978-4fcd-8e88-c785707c2b95"),
                            Address = "Moscow Kremlin st 3",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(5764),
                            Description = "Sample Description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("2c6038f1-9171-4755-b17c-176a9aa1b49b"),
                            Address = "Moscow Kremlin st 4",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(5799),
                            Description = "Sample Description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("764d37c3-dd4e-42dd-8068-e22fb53046f5"),
                            Address = "Moscow Kremlin st 5",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(5847),
                            Description = "Sample Description 5",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("332fa908-8fc2-41c7-a238-26d32a6516e5"),
                            Address = "Moscow Kremlin st 6",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(5881),
                            Description = "Sample Description 6",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("143af7e7-0125-496d-85b8-7328491a2852"),
                            Address = "Moscow Kremlin st 7",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(5914),
                            Description = "Sample Description 7",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("6edec01d-2663-436d-94cc-a56fb85ac99d"),
                            Address = "Moscow Kremlin st 8",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(5947),
                            Description = "Sample Description 8",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("f415768e-9197-47bf-9af8-06fb2af6eb27"),
                            Address = "Moscow Kremlin st 9",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(5982),
                            Description = "Sample Description 9",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("a1117317-7508-4a65-95c1-c7c9d9f3f0c5"),
                            Address = "Moscow Kremlin st 10",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6098),
                            Description = "Sample Description 10",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("d4713f2d-51ec-463e-8415-75b5e38f4405"),
                            Address = "Moscow Kremlin st 11",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6135),
                            Description = "Sample Description 11",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("0b3ca4f8-e81e-4cf2-bc26-5600340ef9d6"),
                            Address = "Moscow Kremlin st 12",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6168),
                            Description = "Sample Description 12",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("73c712fb-9734-4d38-a966-59e54d3b2aaf"),
                            Address = "Moscow Kremlin st 13",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6205),
                            Description = "Sample Description 13",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("5dbaf0c2-1d05-4d09-905f-ded31addf7a8"),
                            Address = "Moscow Kremlin st 14",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6239),
                            Description = "Sample Description 14",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("0522a2c2-3aae-4239-be65-aac569bfa516"),
                            Address = "Moscow Kremlin st 15",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6272),
                            Description = "Sample Description 15",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("1860991a-eab0-4328-b18b-8f6cdef51465"),
                            Address = "Moscow Kremlin st 16",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6305),
                            Description = "Sample Description 16",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("9853d08f-3d1e-4eb1-9f7b-98a287ff4472"),
                            Address = "Moscow Kremlin st 17",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6340),
                            Description = "Sample Description 17",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("c81a82da-b89c-4994-ae9f-188b7e13a234"),
                            Address = "Moscow Kremlin st 18",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6373),
                            Description = "Sample Description 18",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        },
                        new
                        {
                            Id = new Guid("456ba330-8832-4a8f-970d-ffb027c138c8"),
                            Address = "Moscow Kremlin st 19",
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 691, DateTimeKind.Utc).AddTicks(6405),
                            Description = "Sample Description 19",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte>("Grade")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dac50ffa-9203-4443-9134-ffff61153ed3"),
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 692, DateTimeKind.Utc).AddTicks(1513),
                            Description = "Sample review Description 1",
                            Grade = (byte)1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("cb7dac40-057a-4053-9fbe-6db97ce2787a"),
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 692, DateTimeKind.Utc).AddTicks(3904),
                            Description = "Sample review Description 2",
                            Grade = (byte)2,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("54a0b596-28b1-4659-8f76-492713f03d4f"),
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 692, DateTimeKind.Utc).AddTicks(4115),
                            Description = "Sample review Description 3",
                            Grade = (byte)3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("31edd7a1-e91a-49ed-9a2f-1e0c089a7ca7"),
                            CreatedDate = new DateTime(2022, 5, 28, 18, 36, 24, 692, DateTimeKind.Utc).AddTicks(4156),
                            Description = "Sample review Description 4",
                            Grade = (byte)4,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "c8e5a649-14f4-428a-87ef-7f8b8c24a030",
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "c8e5a649-14f4-428a-87ef-7f8b8c24a030",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a754759-1df0-4ec7-8d3e-7d8aa53363f2",
                            Email = "admin",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "a322b9c0b8e19ef16d4d308cd4e1222106d0edf8fbb3c8f1649242dff54a740c",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1f55514-6b5f-4ef1-87f9-0d43c57580a0",
                            TwoFactorEnabled = false,
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.VotePrint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("VotePrints");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrintLayer.Models.VotePrint", b =>
                {
                    b.HasOne("PrintLayer.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
