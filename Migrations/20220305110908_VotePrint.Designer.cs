// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintLayer.Data;

namespace PrintLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220305110908_VotePrint")]
    partial class VotePrint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PrintLayer.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65db5fe0-9bd6-4a55-a7ba-05c69de56448"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 312, DateTimeKind.Utc).AddTicks(3173),
                            Description = "This is a test news description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 1"
                        },
                        new
                        {
                            Id = new Guid("6a422299-022a-46bb-8841-97495a12a1f0"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 312, DateTimeKind.Utc).AddTicks(3800),
                            Description = "This is a test news description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 2"
                        },
                        new
                        {
                            Id = new Guid("37c53a1f-285b-4014-9885-ef5ad71ba7be"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 312, DateTimeKind.Utc).AddTicks(3849),
                            Description = "This is a test news description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 3"
                        },
                        new
                        {
                            Id = new Guid("e1cf271e-a19b-4b06-8c60-b3bd6be937bc"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 312, DateTimeKind.Utc).AddTicks(3872),
                            Description = "This is a test news description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 4"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10dde664-3c3b-4975-8f0a-0e10bfead574"),
                            Address = "Moscow Kremlin st 0",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(4528),
                            Description = "Sample Description 0",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("1054bb35-06e2-4acd-a89c-02c91476cc2a"),
                            Address = "Moscow Kremlin st 1",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(5997),
                            Description = "Sample Description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("de922c6a-4dc8-4923-8fd3-9c275ec6e9ea"),
                            Address = "Moscow Kremlin st 2",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6120),
                            Description = "Sample Description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("80d9f28e-a045-4b5f-b4f1-faaa4818a59b"),
                            Address = "Moscow Kremlin st 3",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6149),
                            Description = "Sample Description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("caead71d-8e4e-4560-8eab-df40eb8d58b5"),
                            Address = "Moscow Kremlin st 4",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6170),
                            Description = "Sample Description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("987541f2-641c-451b-97d9-c7d847ff1d63"),
                            Address = "Moscow Kremlin st 5",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6198),
                            Description = "Sample Description 5",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("e28bb77c-d1ac-4f4e-b95e-a510ed4cfb8d"),
                            Address = "Moscow Kremlin st 6",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6219),
                            Description = "Sample Description 6",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("7d0a9203-6091-45fa-a04c-cb42aed683a7"),
                            Address = "Moscow Kremlin st 7",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6239),
                            Description = "Sample Description 7",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("6843ab1d-030c-434e-b3b7-101320607800"),
                            Address = "Moscow Kremlin st 8",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6258),
                            Description = "Sample Description 8",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("1181a275-2db2-4246-987d-610087e4db03"),
                            Address = "Moscow Kremlin st 9",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6279),
                            Description = "Sample Description 9",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("a3a8f511-9824-4ba6-a9f4-a8a395c678e0"),
                            Address = "Moscow Kremlin st 10",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6299),
                            Description = "Sample Description 10",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("efeb9587-c07a-44ca-bbf3-3967ba964831"),
                            Address = "Moscow Kremlin st 11",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6319),
                            Description = "Sample Description 11",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("e635733f-0d01-42e4-ae60-cdca1231cb0e"),
                            Address = "Moscow Kremlin st 12",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6339),
                            Description = "Sample Description 12",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("20d799f2-60ea-4b3e-9b95-5b345982993a"),
                            Address = "Moscow Kremlin st 13",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6362),
                            Description = "Sample Description 13",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("5690ad1e-0fb1-4cbe-99bb-7ac68db03e45"),
                            Address = "Moscow Kremlin st 14",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6382),
                            Description = "Sample Description 14",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("79f5570b-7d4b-4cad-aeec-0583b8aca7a4"),
                            Address = "Moscow Kremlin st 15",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6402),
                            Description = "Sample Description 15",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("f3ffe41e-80b2-4d14-bb7b-c733d664b30f"),
                            Address = "Moscow Kremlin st 16",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6421),
                            Description = "Sample Description 16",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("b91a9fc4-4305-4b30-b85c-6cc53a019df6"),
                            Address = "Moscow Kremlin st 17",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6486),
                            Description = "Sample Description 17",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("9f273644-40ae-4c75-96d5-90c8d65d0b9b"),
                            Address = "Moscow Kremlin st 18",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6510),
                            Description = "Sample Description 18",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        },
                        new
                        {
                            Id = new Guid("a4af7b95-6d81-43b5-bd1a-ae16975747f5"),
                            Address = "Moscow Kremlin st 19",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(6529),
                            Description = "Sample Description 19",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e4494ab-4d74-447a-bcab-fd322e036a1c"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 311, DateTimeKind.Utc).AddTicks(9192),
                            Description = "Sample review Description 1",
                            Grade = (byte)1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("471d313d-bfaa-4327-8686-eab7f73c5eee"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 312, DateTimeKind.Utc).AddTicks(411),
                            Description = "Sample review Description 2",
                            Grade = (byte)2,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("dc71cf95-91f9-4fb0-9787-7e8838730b78"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 312, DateTimeKind.Utc).AddTicks(522),
                            Description = "Sample review Description 3",
                            Grade = (byte)3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("83b7f926-d06a-42b9-967b-8ed5e08f912e"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 8, 57, 312, DateTimeKind.Utc).AddTicks(548),
                            Description = "Sample review Description 4",
                            Grade = (byte)4,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "b8e05b50-4df5-45e5-b5cf-671869c40dd2",
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b8e05b50-4df5-45e5-b5cf-671869c40dd2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ac860ca-c9ac-4220-bac4-2768043ee457",
                            Email = "admin",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "a322b9c0b8e19ef16d4d308cd4e1222106d0edf8fbb3c8f1649242dff54a740c",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3018a85-59f9-40a3-8494-5f907f12cc86",
                            TwoFactorEnabled = false,
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
