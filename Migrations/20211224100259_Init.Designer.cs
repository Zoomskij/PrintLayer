// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintLayer.Data;

namespace PrintLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20211224100259_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PrintLayer.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e47fc99e-9796-4bfc-b700-76b892e1caed"),
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 2, DateTimeKind.Utc).AddTicks(6489),
                            Description = "This is a test news description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 1"
                        },
                        new
                        {
                            Id = new Guid("31d7cda3-7f1e-4ebd-83f1-e346f84abdd3"),
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 2, DateTimeKind.Utc).AddTicks(7084),
                            Description = "This is a test news description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 2"
                        },
                        new
                        {
                            Id = new Guid("710fb015-5a4d-4805-bde7-1d5030ecf950"),
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 2, DateTimeKind.Utc).AddTicks(7126),
                            Description = "This is a test news description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 3"
                        },
                        new
                        {
                            Id = new Guid("116237d8-5eb3-47a1-81db-1421ac7cb73b"),
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 2, DateTimeKind.Utc).AddTicks(7151),
                            Description = "This is a test news description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 4"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb2f0222-8553-4242-9722-a6d6c12b7310"),
                            Address = "Moscow Kremlin st 0",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(7981),
                            Description = "Sample Description 0",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("56fb7c2c-34ac-40db-9561-6bb3706d3d5f"),
                            Address = "Moscow Kremlin st 1",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9535),
                            Description = "Sample Description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("5cba18cd-4d71-4fe9-90db-3f410e34af27"),
                            Address = "Moscow Kremlin st 2",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9618),
                            Description = "Sample Description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("45a3da50-d3bd-4c19-a970-f925e8221c0e"),
                            Address = "Moscow Kremlin st 3",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9650),
                            Description = "Sample Description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("ec64890f-b6df-4554-8260-ab88bfce4ffe"),
                            Address = "Moscow Kremlin st 4",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9672),
                            Description = "Sample Description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("70d96bd6-6333-4e8d-b985-97322b41c292"),
                            Address = "Moscow Kremlin st 5",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9694),
                            Description = "Sample Description 5",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("f822e6e8-b5a5-4d4a-9dd0-727e2a267def"),
                            Address = "Moscow Kremlin st 6",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9713),
                            Description = "Sample Description 6",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("6606290b-6811-494c-9974-d62cddb440be"),
                            Address = "Moscow Kremlin st 7",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9732),
                            Description = "Sample Description 7",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("1327c0da-68de-4b80-870d-bbbff8c1710d"),
                            Address = "Moscow Kremlin st 8",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9751),
                            Description = "Sample Description 8",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("ee1bfda5-8179-4b23-a041-c217151814d1"),
                            Address = "Moscow Kremlin st 9",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9772),
                            Description = "Sample Description 9",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("5d6e0834-5c05-4fa4-9f0e-753000fcb5fd"),
                            Address = "Moscow Kremlin st 10",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9791),
                            Description = "Sample Description 10",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("cd9efa5f-11b2-432e-af43-3a2f3872a579"),
                            Address = "Moscow Kremlin st 11",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9812),
                            Description = "Sample Description 11",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("c9363010-62de-4f9a-a5fa-7eda997395d7"),
                            Address = "Moscow Kremlin st 12",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9882),
                            Description = "Sample Description 12",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("ac5f46f7-4841-451f-9ed6-8cf8a16349e9"),
                            Address = "Moscow Kremlin st 13",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9905),
                            Description = "Sample Description 13",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("f04b38af-fbdb-47c7-85f1-688af15a9cff"),
                            Address = "Moscow Kremlin st 14",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9924),
                            Description = "Sample Description 14",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("5e56290c-ef75-4e04-803e-c82866ae91ca"),
                            Address = "Moscow Kremlin st 15",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9942),
                            Description = "Sample Description 15",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("3c1a2b8d-447f-4c18-b2f5-2ab7422ebc53"),
                            Address = "Moscow Kremlin st 16",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9961),
                            Description = "Sample Description 16",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("4cea8115-215a-4db9-b323-6d01c6eb0cdd"),
                            Address = "Moscow Kremlin st 17",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9981),
                            Description = "Sample Description 17",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("15a71a7d-6118-459a-ae6e-8124e7e8677d"),
                            Address = "Moscow Kremlin st 18",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 1, DateTimeKind.Utc).AddTicks(9999),
                            Description = "Sample Description 18",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        },
                        new
                        {
                            Id = new Guid("e039b1d0-1d30-4989-ae2d-6606d794e35a"),
                            Address = "Moscow Kremlin st 19",
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 2, DateTimeKind.Utc).AddTicks(19),
                            Description = "Sample Description 19",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c128e968-1e51-4268-9148-4217c25482ec"),
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 2, DateTimeKind.Utc).AddTicks(2450),
                            Description = "Sample review Description 1",
                            Grade = (byte)1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("4beee834-d716-4674-bfd7-c05bc0cae3e2"),
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 2, DateTimeKind.Utc).AddTicks(3864),
                            Description = "Sample review Description 2",
                            Grade = (byte)2,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("515e4da6-3746-469f-b735-fcf9bf521b0a"),
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 2, DateTimeKind.Utc).AddTicks(3967),
                            Description = "Sample review Description 3",
                            Grade = (byte)3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("48d7f120-6383-4849-ba16-b01168f652a1"),
                            CreatedDate = new DateTime(2021, 12, 24, 10, 2, 49, 2, DateTimeKind.Utc).AddTicks(3992),
                            Description = "Sample review Description 4",
                            Grade = (byte)4,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "0c32f093-abb1-48b8-bb89-c75f484dd8f8",
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0c32f093-abb1-48b8-bb89-c75f484dd8f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09d6c264-fe70-42a2-b572-6c0e7c5fee15",
                            Email = "admin",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "a322b9c0b8e19ef16d4d308cd4e1222106d0edf8fbb3c8f1649242dff54a740c",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1850507-46b4-426d-9b85-be17620bf66b",
                            TwoFactorEnabled = false,
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
