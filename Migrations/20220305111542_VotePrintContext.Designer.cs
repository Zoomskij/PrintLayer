// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintLayer.Data;

namespace PrintLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220305111542_VotePrintContext")]
    partial class VotePrintContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PrintLayer.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("PrintLayer.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4df0e149-a7f1-4bbc-9dce-1474229b1ddd"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 799, DateTimeKind.Utc).AddTicks(3020),
                            Description = "This is a test news description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 1"
                        },
                        new
                        {
                            Id = new Guid("9ec66680-79b2-4344-be7e-03306ab60c8a"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 799, DateTimeKind.Utc).AddTicks(3645),
                            Description = "This is a test news description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 2"
                        },
                        new
                        {
                            Id = new Guid("5cf1c284-6dd8-4cdd-bf79-9b6a9ce39f48"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 799, DateTimeKind.Utc).AddTicks(3695),
                            Description = "This is a test news description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 3"
                        },
                        new
                        {
                            Id = new Guid("2016463b-3433-4700-b768-ff128962ec9e"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 799, DateTimeKind.Utc).AddTicks(3716),
                            Description = "This is a test news description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 4"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ae88a2e-0b07-4f6e-9142-ccba0ced0a31"),
                            Address = "Moscow Kremlin st 0",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(4365),
                            Description = "Sample Description 0",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("fb94dc37-22d1-47c6-b0f6-315562239ad2"),
                            Address = "Moscow Kremlin st 1",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(5886),
                            Description = "Sample Description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("e61a37cb-eff1-445c-93b7-07560861e614"),
                            Address = "Moscow Kremlin st 2",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(5971),
                            Description = "Sample Description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("2ae6a3d2-7ddb-435d-adae-1a33766dd94f"),
                            Address = "Moscow Kremlin st 3",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6037),
                            Description = "Sample Description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("b791b594-cd0b-4410-a4d3-b5a91fed75b6"),
                            Address = "Moscow Kremlin st 4",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6073),
                            Description = "Sample Description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("739d8a59-a5a5-4549-a122-21bc9389bde4"),
                            Address = "Moscow Kremlin st 5",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6098),
                            Description = "Sample Description 5",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("b7b7c762-0c07-494a-bafc-38101fc06d3a"),
                            Address = "Moscow Kremlin st 6",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6119),
                            Description = "Sample Description 6",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("c827c81f-3802-4f4d-95fd-c47f8ea4c3b8"),
                            Address = "Moscow Kremlin st 7",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6140),
                            Description = "Sample Description 7",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("44e005c6-feb8-495f-8eff-3764680d59eb"),
                            Address = "Moscow Kremlin st 8",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6160),
                            Description = "Sample Description 8",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("498af4f0-fb52-4a2c-adb5-a3ac53170a33"),
                            Address = "Moscow Kremlin st 9",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6182),
                            Description = "Sample Description 9",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("15ff7c21-f02f-4321-b51e-f07707d89fd9"),
                            Address = "Moscow Kremlin st 10",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6201),
                            Description = "Sample Description 10",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("a4d50b0e-b4f7-4284-addd-e72806102cba"),
                            Address = "Moscow Kremlin st 11",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6222),
                            Description = "Sample Description 11",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("e50ead8a-38e4-4b98-858f-ce7e2704f25c"),
                            Address = "Moscow Kremlin st 12",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6244),
                            Description = "Sample Description 12",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("eefb2b5e-6ee9-4165-a813-a8ab4ba20dbd"),
                            Address = "Moscow Kremlin st 13",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6265),
                            Description = "Sample Description 13",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("234f466a-896f-4a35-b131-d316469009e0"),
                            Address = "Moscow Kremlin st 14",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6284),
                            Description = "Sample Description 14",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("8e121cb4-8a71-4939-8a5e-2eadb0632866"),
                            Address = "Moscow Kremlin st 15",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6304),
                            Description = "Sample Description 15",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("51438859-a30f-42bb-a01a-98433575810c"),
                            Address = "Moscow Kremlin st 16",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6324),
                            Description = "Sample Description 16",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("b4d3dbfb-bee0-42ff-bcf8-05aed26d3db8"),
                            Address = "Moscow Kremlin st 17",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6345),
                            Description = "Sample Description 17",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("64d3e54e-ef32-4dfc-868b-42f8a268f72d"),
                            Address = "Moscow Kremlin st 18",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6416),
                            Description = "Sample Description 18",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        },
                        new
                        {
                            Id = new Guid("b0ff37b2-32a2-47c0-9b2c-0f2f89ca2a65"),
                            Address = "Moscow Kremlin st 19",
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(6436),
                            Description = "Sample Description 19",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74ea8762-6ea7-4e0d-a4c4-89d1c4e9bc63"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 798, DateTimeKind.Utc).AddTicks(9077),
                            Description = "Sample review Description 1",
                            Grade = (byte)1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("96661908-dc34-463a-920c-372d5fb2c884"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 799, DateTimeKind.Utc).AddTicks(281),
                            Description = "Sample review Description 2",
                            Grade = (byte)2,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("3c0498ee-f835-409a-8056-db2b2e76ef53"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 799, DateTimeKind.Utc).AddTicks(391),
                            Description = "Sample review Description 3",
                            Grade = (byte)3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("60cca17e-fc3f-429a-9a5f-df050ddfaa82"),
                            CreatedDate = new DateTime(2022, 3, 5, 11, 15, 41, 799, DateTimeKind.Utc).AddTicks(416),
                            Description = "Sample review Description 4",
                            Grade = (byte)4,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc",
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0fc161d3-2f3d-40e5-bf6b-a712b7fce3bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80fbd119-61c5-45b5-8d32-94e61520e72b",
                            Email = "admin",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "a322b9c0b8e19ef16d4d308cd4e1222106d0edf8fbb3c8f1649242dff54a740c",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7b93b65-0afd-4d83-88a0-22fc35f0b9ec",
                            TwoFactorEnabled = false,
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.VotePrint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("VotePrints");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrintLayer.Models.VotePrint", b =>
                {
                    b.HasOne("PrintLayer.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
